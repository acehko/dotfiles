" --- Vim-Plug Start ---

call plug#begin('~/.vim/plugged')


" Plugins

" General
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'nanotech/jellybeans.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'neomake/neomake'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'raimondi/delimitmate'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'airblade/vim-gitgutter'
Plug 'Yggdroot/indentLine'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'Chiel92/vim-autoformat'
Plug 'scrooloose/nerdcommenter'
Plug 'elzr/vim-json'
Plug 'terryma/vim-multiple-cursors'
Plug 'godlygeek/tabular'

" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" NERDTree
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'robinfehr/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" JavaScript
Plug 'pangloss/vim-javascript', { 'for' : 'javascript' }

" TypeScript
Plug 'Shougo/vimproc.vim',         { 'for' : 'typescript', 'do' : 'make' }
Plug 'Quramy/tsuquyomi',           { 'for' : 'typescript' }
Plug 'leafgarland/typescript-vim', { 'for' : 'typescript' }


" Golang
Plug 'zchee/deoplete-go', { 'for': 'go', 'do': 'make' }
Plug 'fatih/vim-go', { 'for' : 'go', 'do': ':GoInstallBinaries' }


call plug#end()

" --- Vim-Plug End ---



" --- Vim Config Start ---

" General
set encoding=utf8  " UTF-8 FTW
set nocompatible   " Not compatible with Vi
set autoread       " Detect when a file has changed
set visualbell     " No beep on errors
set ttimeoutlen=50 " Remove delay on ESC
set exrc           " Allow per-project configuration files
set secure         " Don't load other people's per-project configs
set ic             " Case-insensitive search
let mapleader=','  " map <Leader> to ","

" UI
syntax enable      " Enable syntax highlighting
silent! colorscheme jellybeans

set number         " Line numbers
set relativenumber " Relative line numbers
set wrap           " Word wrap
set showcmd        " Show current commands in the footer
set cursorline     " Highlight cursor line
set wildmenu       " Show tab options menu
set lazyredraw     " Redraw only when needed
set mouse=a        " Allow using the mouse
set guicursor=     " Don't change the cursor
set updatetime=250 " Faster update time


" Tabs and spaces
set expandtab
set autoindent
set smartindent

set list
set listchars=tab:\ " Show tab guides

autocmd FileType * call FourSpaceIndent()
autocmd FileType yaml,logstash call TwoSpaceIndent()

function FourSpaceIndent()
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4

    silent! :IndentLinesEnable
    silent! :IndentGuidesDisable
endfunction

function TwoSpaceIndent()
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2

    silent! :IndentLinesDisable
    silent! :IndentGuidesEnable
endfunction


" Folding
set foldlevelstart=20
set viewoptions-=options

nnoremap <space> za
vnoremap <space> zf

autocmd FileType    * setlocal foldmethod=syntax
autocmd BufWinLeave * silent! mkview
autocmd BufWinEnter * silent! loadview


" Window management

" Window creation
map <C-w>h :vnew<CR>
map <C-w>j :below new<CR>
map <C-w>k :new<CR>
map <C-w>l :rightb vnew<CR>

map <C-w>x :q<CR> " Close a window

" Window movement
map <C-h> :wincmd h<CR>
map <C-j> :wincmd j<CR>
map <C-k> :wincmd k<CR>
map <C-l> :wincmd l<CR>

" Tab management
map <C-w>c :tabe<CR>
map <C-w>n :tabn<CR>
map <C-w>p :tabp<CR>


" Trim trailing whitespace and empty lines at the end of file
function! TrimWhitespace()

    " Save the current search and cursor position
    let _s=@/
    let l = line('.')
    let c = col('.')

    :retab
    silent! :%s#\($\n\s*\)\+\%$## " Delete empty lines at the end of file
    silent! :%s/\s\+$//e          " Delete trailing whitespace

    " Restore the saved search and cursor position
    let @/=_s
    call cursor(l, c)

endfunction

" Trim whitespace on save
autocmd BufWritePre * :call TrimWhitespace()


" --- Vim Config End ---



" --- Plugin Config Start ---


" EasyMotion
" Map prefix to <Leader> instead of <Leader><Leader>
map <Leader> <Plug>(easymotion-prefix)


" CtrlP
" Ignore files in .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" Close NERDTree when opening CtrlP
let g:ctrlp_map = '<Nop>'
map <C-p> :NERDTreeClose \| :CtrlP<CR>


" NeoMake
" Run on read and save
if exists('neomake#configure#automake')
    call neomake#configure#automake('rw', 100)
endif

" Custom colors
:highlight NeomakeWarning ctermfg=216 ctermbg=233
:highlight NeomakeError ctermfg=160 ctermbg=233

" Custom symbols
let g:neomake_warning_sign={'text': '', 'texthl': 'NeomakeWarning'}
let g:neomake_error_sign={'text': '✘', 'texthl': 'NeomakeError'}

" Open quickfix window
let g:neomake_open_list = 2

" Close quickfix window when file is closed
autocmd BufWinEnter quickfix nnoremap <silent> <buffer> q :cclose<cr>:lclose<cr>
autocmd BufEnter * if (winnr('$') == 1 && &buftype ==# 'quickfix' ) | bd | q | endif


" Deoplete
" Enable at startup
let g:deoplete#enable_at_startup = 1

" Disable preview window
set completeopt-=preview

" Fuzzy search
if exists('deoplete#custom#set')
    call deoplete#custom#set('_', 'matchers', ['matcher_full_fuzzy'])
endif

" Cycle with Tab and Shift + Tab
inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"


" DelimitMate
let g:delimitMate_expand_cr = 1 " Auto-indent


" vim-gutter
" Custom symbols
let g:gitgutter_sign_added              = '┃'
let g:gitgutter_sign_modified           = '┃'
let g:gitgutter_sign_removed            = '┃'
let g:gitgutter_sign_removed_first_line = '┃'
let g:gitgutter_sign_modified_removed   = '┃'


" IndentLine
let g:indentLine_char                 = ''
let g:indentLine_first_char           = ''
let g:indentLine_showFirstIndentLevel = 1


" NERDTree
map <C-b> :NERDTreeTabsToggle<CR>

let g:nerdtree_tabs_open_on_console_startup   = 2         " Open NERDTree if a directory was opened
let g:NERDTreeMapActivateNode                 = '<Space>' " Open / close directorties and files with space
let g:NERDTreeQuitOnOpen                      = 1         " Close NERDTree when opening a file
let g:NERDTreeDirArrowExpandable              = ""       " Custom collapsed icon
let g:NERDTreeDirArrowCollapsible             = ""       " Custom expanded icon
let g:NERDTreeGitStatusWithFlags              = 0         " Disable status flags
let g:NERDTreeGitStatusNodeColorization       = 1         " Enable status colors
let g:NERDTreeMinimalUI                       = 1         " Hide help text

hi Directory ctermfg                          = 110       " Change directory color


" NERD Commenter
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
map <C-_> <Leader>c<Space>


" Airline
set laststatus=2                                 " Always show the status line
let g:airline#extensions#tabline#enabled  = 1    " Always show all buffers
let g:airline#extensions#tabline#fnamemod = ':t' " Show only filename in buffers
let g:airline_powerline_fonts             = 1    " Use powerline font
let g:airline_skip_empty_sections         = 1    " Don't display empty sections


" Tsuquyomi
let g:tsuquyomi_disable_quickfix = 1 " Disable vim quickfix window, syntastic will handle checks
" Bind TsuquyomiRenameSymbol on F2
autocmd FileType typescript nmap <buffer> <F2> <Plug>(TsuquyomiRenameSymbol)


" DevIcons
let g:webdevicons_enable_airline_statusline              = 1    " Enabled on airline
let g:WebDevIconsNerdTreeAfterGlyphPadding               = ''   " Padding after the icon
let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol   = ''  " Default icon for unknown file types
let g:WebDevIconsUnicodeDecorateFolderNodes              = 1    " Enable icons on folders
let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ' ' " Change folder icon
let g:DevIconsEnableFolderPatternMatching                = 0    " Disable custom icons on folders

" Custom file extension icons
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['swp'] = ''

" Custom exact match files
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.npmignore'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gitignore'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.vimrc']     = ''


" vim-go
let g:go_auto_type_info      = 0           " Don't run GoInfo automatically
let g:go_fmt_autosave        = 0           " Disable gofmt
let g:go_highlight_methods   = 1           " Highlight methods
let g:go_highlight_operators = 1           " Highlight operators
let g:go_addtags_transform   = 'camelcase' " Use camelcase for :GoAddTags

" Bind rename to F2
autocmd FileType go nmap <buffer> <F2> <Plug>(go-rename)


" vim-autoformat
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0

autocmd BufWritePre *.go,*.js,*.ts :Autoformat


" vim-json
" Fix indentLine conflict
let g:vim_json_syntax_conceal = 0


" vim-multiple-cursors
let g:multi_cursor_use_default_mapping = 2
let g:multi_cursor_next_key = '<C-n>'
let g:multi_cursor_prev_key = '<C-m>'
let g:multi_cursor_skip_key = '<C-x>'
let g:multi_cursor_quit_key = '<Esc>'

let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0


" --- Plugin Config End ---

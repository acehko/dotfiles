" --- Plugins Start ---
call plug#begin('~/.vim/plugged')

" General
Plug 'acehko/ale'
Plug 'airblade/vim-gitgutter'
Plug 'andrewradev/splitjoin.vim'
Plug 'bazelbuild/vim-ft-bzl'
Plug 'cespare/vim-toml'
Plug 'elzr/vim-json', { 'for': 'json' }
Plug 'godlygeek/tabular'
Plug 'jiangmiao/auto-pairs'
Plug 'nanotech/jellybeans.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'majutsushi/tagbar'
Plug 'martinda/Jenkinsfile-vim-syntax'
Plug 'sbdchd/neoformat'
Plug 'scrooloose/nerdcommenter'
Plug 'shime/vim-livedown', { 'for': 'markdown' }
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-notes', { 'do': 'mkdir -p $HOME/.vim/notes' }
Plug 'yggdroot/indentline'
Plug 'sirver/ultisnips'
Plug 'roxma/nvim-completion-manager'
Plug 'easymotion/vim-easymotion'
Plug 'dominikduda/vim_current_word'
Plug 'haya14busa/incsearch.vim'

" Fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all --no-update-rc' }
Plug 'junegunn/fzf.vim'

" NERDTree
Plug 'scrooloose/nerdtree'
Plug 'robinfehr/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'

" JavaScript
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }

" TypeScript
Plug 'leafgarland/typescript-vim',  { 'for': 'typescript' }
Plug 'mhartington/nvim-typescript', { 'for': 'typescript' }
Plug 'quramy/tsuquyomi',            { 'for': 'typescript' }
Plug 'shougo/vimproc.vim',          { 'for': 'typescript', 'do': 'make' }

" Go
Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoInstallBinaries' }

" Vim
Plug 'shougo/neco-vim'

call plug#end()
" --- Plugins End ---

" --- General Start ---
set encoding=utf8  " UTF-8 FTW
set nocompatible   " Not compatible with Vi
set autoread       " Detect when a file has changed
set visualbell     " No beep on errors
set ttimeoutlen=50 " Remove delay on ESC
set exrc           " Allow per-project configuration files
set secure         " Don't load other people's per-project configs
set ic             " Case-insensitive search
set incsearch      " Incremental search
let mapleader=','  " map <Leader> to ','
set number         " Line numbers
set relativenumber " Relative line numbers
set wrap           " Word wrap
set showcmd        " Show current commands in the footer
set cursorline     " Highlight cursor line
set wildmenu       " Show tab options menu
set lazyredraw     " Redraw only when needed
set mouse=a        " Allow using the mouse
set updatetime=250 " Faster update time

syntax enable      " Enable syntax highlighting
silent! colorscheme jellybeans

" Always show sign column
augroup SignColumn
    autocmd!
    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
augroup end

hi CurrentWord cterm=underline
let g:vim_current_word#highlight_current_word = 1

" Custom filetypes
augroup CustomFileTypes
    autocmd!
    autocmd BufRead,BufNewFile .yamllint set filetype=yaml
augroup end

" hi SameWord cterm=underline
" augroup SameWord
    " autocmd!
    " autocmd! CursorMoved * exe printf('match SameWord /\V\<%s\>/', escape(expand('<cword>'), '/\'))
" augroup end

" hi Search ctermfg=233 ctermbg=231
" hi IncSearch ctermfg=233 ctermbg=231

" --- General End ---

" --- Window Start ---
" Window creation
map <C-w>h :vnew<CR>
map <C-w>j :below new<CR>
map <C-w>k :new<CR>
map <C-w>l :rightb vnew<CR>

" Close a window
map <C-w>x :q<CR>

" Window movement
map <C-h> :wincmd h<CR>
map <C-j> :wincmd j<CR>
map <C-k> :wincmd k<CR>
map <C-l> :wincmd l<CR>

" Tab management
map <C-w>c :tabe<CR>
map <C-w>n :tabn<CR>
map <C-w>p :tabp<CR>

" Switching between most recent buffers
nnoremap <Leader>, :b#<CR>
" --- Window End ---

" --- Indentation Start ---
set expandtab
set autoindent
set smartindent

set list
set listchars=tab:\ " Show tab guides

augroup Indentation
    autocmd!
    autocmd FileType *         call FourSpaceIndent()
    autocmd FileType yaml,toml,javascript call TwoSpaceIndent()
    autocmd FileType notes     call NoIndentGuides()
augroup end

function! FourSpaceIndent()
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4

    silent! :IndentLinesEnable
    silent! :IndentGuidesDisable
endfunction

function! TwoSpaceIndent()
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2

    silent! :IndentLinesDisable
    silent! :IndentGuidesEnable
endfunction

function! NoIndentGuides()
    silent! :IndentLinesDisable
    silent! :IndentGuidesDisable
endfunction
" --- Indentation End ---

" --- Whitespace Start ---
" Trim trailing whitespace and empty lines at the end of file
function! TrimWhitespace()

    " Save the current search and cursor position
    let _s=@/
    let l = line('.')
    let c = col('.')

    :retab
    silent! %s#\($\n\s*\)\+\%$## " Delete empty lines at the end of file
    silent! %s/\s\+$//e          " Delete trailing whitespace

    " Restore the saved search and cursor position
    let @/=_s
    call cursor(l, c)

endfunction

" Trim whitespace on save
augroup TrimWhitespace
    autocmd!
    autocmd BufWritePre * :call TrimWhitespace()
augroup end
" --- Whitespace End ---

" --- Folds Start ---
set foldlevelstart=20
set viewoptions-=options

nnoremap <space> za
vnoremap <space> zf

augroup Folding
    autocmd!
    autocmd FileType    * setlocal foldmethod=syntax
    autocmd BufWinLeave * silent! mkview
    autocmd BufWinEnter * silent! loadview
augroup end
" --- Folds End ---

" --- Statusline Start ---
hi StatusLine         ctermfg=231 ctermbg=233
hi StatusLineMode     ctermfg=110 ctermbg=233
hi StatusLineFile     ctermfg=59  ctermbg=233
hi StatusLineFileType ctermfg=59  ctermbg=233
hi StatusLineLocked   ctermfg=167 ctermbg=233
hi StatusLinePosition ctermfg=110 ctermbg=233

" Mode titles
let g:modes={
    \ 'n'  : 'NORMAL',
    \ 'v'  : 'VISUAL',
    \ 'V'  : 'V·LINE',
    \ '' : 'V·BLOCK',
    \ 'i'  : 'INSERT',
    \ 't'  : 'TERMINAL'
\}

" Returns the mode text
function! StatusLineMode()
    let m = mode()
    call StatusLineChangeColor(m)
    if has_key(g:modes, m)
        return '['.g:modes[m].']'
    endif
    return '['.m.']'
endfunction

function! Strip(str)
    return substitute(a:str, '^\s*\(.\{-}\)\s*$', '\1', '')
endfunction

" Returns the current git branch
function! StatusLineBranch()
    if !exists('g:git_branch')
        let branch = system("git branch 2> /dev/null | grep '^*' | sed 's/^* //'")
        let g:git_branch = substitute(branch, '\n\+$', '', '')
        let g:git_status = system('command git status --porcelain 2> /dev/null | tail -n1')
    endif

    if strlen(g:git_status) > 0
        hi StatusLineBranch ctermfg=215 ctermbg=233
    else
        hi StatusLineBranch ctermfg=107 ctermbg=233
    endif

    if g:git_branch == ''
        return ''
    else
        return ''.g:git_branch.' '
    endif
endfunction

" Changes status line mode color based on the current mode
function! StatusLineChangeColor(mode)
    if a:mode == 'n'
        hi StatusLineMode ctermfg=110
    elseif a:mode == 'i'
        hi StatusLineMode ctermfg=107
    elseif a:mode == 'v' || a:mode == 'V' || a:mode == ''
        hi StatusLineMode ctermfg=167
    elseif a:mode == 't'
        hi StatusLineMode ctermfg=215
    else
        hi StatusLineMode ctermfg=110
    endif
endfunction

" Updates file name color if modified
" and returns a lock icon if read only
function! StatusLineFile()
    if &modified
        hi StatusLineFile ctermfg=215
    else
        hi StatusLineFile ctermfg=59
    endif

    if &readonly || !&modifiable
        return '🔒'
    endif
    return ''
endfunction

set noshowmode
set laststatus=2
set statusline=%#StatusLineMode#%{StatusLineMode()}
set statusline+=\ %#StatusLineBranch#%{StatusLineBranch()}
set statusline+=%#StatusLineFileType#»%#StatusLineFile#\ %f\ %#StatusLineLocked#%{StatusLineFile()}
set statusline+=%=%#StatusLineFileType#%{WebDevIconsGetFileTypeSymbol()}%{&filetype}\ [%{&fileencoding?&fileencoding:&encoding}]
set statusline+=\ %#StatusLineMode#[%l/%L\ \ %c]
" --- Statusline End ---

" --- Tabline Start ---
hi TabLine    ctermfg=59 ctermbg=233
hi TabLineSel cterm=NONE ctermfg=110 ctermbg=233
hi Title      ctermfg=59 ctermbg=233

function! Tabline()
  let t = ''
  for i in range(tabpagenr('$'))

    let tabnr = i + 1
    let winnr = tabpagewinnr(tabnr)
    let buflist = tabpagebuflist(tabnr)
    let bufnr = buflist[winnr - 1]
    let bufname = fnamemodify(bufname(bufnr), ':t')

    let t .= '%' . tabnr . 'T'
    let t .= (tabnr == tabpagenr() ? '%#TabLineSel# [' : '%#TabLine#  ')
    let t .= tabnr . ':'

    let t .= empty(bufname) ? ' No Name' : ' ' . bufname
    let t .= (tabnr == tabpagenr() ? ']' : ' ')

    let bufmodified = getbufvar(bufnr, "&mod")
    if bufmodified | let t .= '+ ' | endif
  endfor
  let t .= '%#TabLineFill#'
  return t
endfunction

set tabline=%!Tabline()
" --- Tabline End ---

" --- Plugins Config Start ---
" --- Ale Start ---
" Automatically open loclist
let g:ale_open_list = 1

" Custom colors
hi ALEError ctermfg=160 ctermbg=NONE
hi ALEErrorSign ctermfg=160 ctermbg=NONE
hi ALEWarning ctermfg=215 ctermbg=NONE
hi ALEWarningSign ctermfg=215 ctermbg=NONE

" Custom symbols
let g:ale_sign_error = '✘'
let g:ale_sign_warning = ''

" Enabed linters
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'go': ['go build', 'gofmt', 'golint', 'go vet', 'staticcheck'],
\}

" Enabled fixers
let g:ale_fixers = {
\   'bzl': ['buildifier'],
\   'javascript': ['eslint'],
\   'go': ['goimports']
\}

let g:ale_fix_on_save = 1
" --- Ale End ---

" --- Auto Pairs Start ---
let g:AutoPairsMapCR              = 0       " Don't autoatically remap <CR>
let g:AutoPairsCenterLine         = 0       " Don't change scroll position
let g:AutoPairsShortcutBackInsert = '<M-e>' " Bind ALT + E to jump back and insert closed pair
" --- Auto Pairs End ---

" --- DevIcons Start ---
let g:WebDevIconsNerdTreeAfterGlyphPadding               = ''   " Padding after the icon
let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol   = ''  " Default icon for unknown file types
let g:WebDevIconsUnicodeDecorateFolderNodes              = 1    " Enable icons on folders
let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ' ' " Directory icon
let g:DevIconsEnableFolderPatternMatching                = 0    " Disable custom icons on folders
" --- DevIcons End ---

" --- EasyMotion Start ---
" Map prefix to <Leader> instead of <Leader><Leader>
map <Leader> <Plug>(easymotion-prefix)
" --- EasyMotion End ---

" --- FZF Start ---
" Close Tagbar, NERDTree and open FZF
function! OpenFZF()
    TagbarClose
    NERDTreeClose
    FZF
endfunction

" Bind OpenFZF to CTRL + P
nnoremap <C-p> :call OpenFZF()<CR>

" Enable fuzzy matching
let g:cm_matcher = {'module': 'cm_matchers.abbrev_matcher', 'case': 'smartcase'}
" --- FZF End ---

" --- IndentLine Start ---
let g:indentLine_char                 = ''
let g:indentLine_first_char           = ''
let g:indentLine_showFirstIndentLevel = 1
" --- IndentLine End ---

" --- Neoformat Start ---
" Enabled formatters
let g:neoformat_enabled_go       = ['goimports']
let g:neoformat_enabled_javascript = ['eslint_d']
let g:neoformat_enabled_json     = ['jsbeautify']
let g:neoformat_enabled_typescript = ['jsbeautify']
let g:neoformat_enabled_python   = ['autopep8']
let g:neoformat_enabled_bzl      = ['buildifier']
let g:neoformat_enabled_markdown = ['remark']
let g:neoformat_enabled_php      = ['phpcsfixer']

" Only show messages on error
let g:neoformat_only_msg_on_error = 1
" let g:neoformat_verbose = 1

" Format on save
augroup Neoformat
    autocmd!
    autocmd BufWritePre *.html,*.css,*.json,*.py,*md,*.php silent! undojoin | Neoformat
augroup end
" --- Neoformat End ---

" --- NERDCommenter Start ---
let g:NERDSpaceDelims       = 1 " Add space after comment delimiters
let g:NERDCommentEmptyLines = 1 " Comment empty lines

" Align left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Bind to CTRL + /
map <C-_> <Plug>NERDCommenterInvert
" --- NERDCommenter End ---

" --- NERDTree Start ---
hi Directory ctermfg=110

" Bind NERDTree to CTRL + B
map <C-b> :NERDTreeToggle<CR>

let g:NERDTreeMapActivateNode               = '<Space>' " Open / close directorties and files with space
let g:NERDTreeQuitOnOpen                    = 1         " Close NERDTree when opening a file
let g:NERDTreeDirArrowExpandable            = ""       " Custom collapsed icon
let g:NERDTreeDirArrowCollapsible           = ""       " Custom expanded icon
let g:NERDTreeGitStatusWithFlags            = 0         " Disable status flags
let g:NERDTreeGitStatusNodeColorization     = 1         " Enable status colors
let g:NERDTreeMinimalUI                     = 1         " Hide help text

augroup NERDTreeOpenOnDir
    autocmd!
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * | if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
augroup end
" --- NERDTree End ---

" --- nvim-completion-manager Start ---
" Hide completion messages
set shortmess+=c

" Expand ultisnips command with CTRL + U
inoremap <silent> <C-u> <C-r>=cm#sources#ultisnips#trigger_or_popup("\<Plug>(ultisnips_expand)")<CR>

" Expand ultisnips command on enter, or insert a new line instead
imap <expr> <silent> <CR>  (pumvisible() ?  "\<c-y>\<Plug>(expand_or_nl)" : "\<CR>\<C-R>=AutoPairsReturn()\<CR>")
imap <expr> <Plug>(expand_or_nl) (cm#completed_is_snippet() ? "\<C-U>":"\<CR>")

" Cycle with Tab and Shift + Tab
inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

" Custom completion menu colors
hi Pmenu    ctermfg=231 ctermbg=235
hi PmenuSel ctermfg=232 ctermbg=110
" --- nvim-completion-menu End ---

" --- Tagbar Start ---
" Toggle on CTRL + G
nnoremap <C-G> :TagbarClose<CR> \| :TagbarOpenAutoClose<CR>

" Jump between tags with CTRL + J and CTRL + K
let g:tagbar_map_nexttag    = '<C-j>'
let g:tagbar_map_prevtag    = '<C-k>'
let g:tagbar_map_togglefold = '<Space>'
" --- Tagbar End ---

" --- Tsuquyomi Start ---
" Disable quickfix window, Ale will handle checks
let g:tsuquyomi_disable_quickfix = 1

" Bind TsuquyomiRenameSymbol to F2
augroup TypescriptRename
    autocmd!
    autocmd FileType typescript nmap <buffer> <F2> <Plug>(TsuquyomiRenameSymbol)
augroup end
" --- Tsuquyomi End ---

" --- UltiSnips Start ---
let g:UltiSnipsJumpForwardTrigger  = '<M-M>'                    " Bind CTRL + Enter to jump to the next tabstop
let g:UltiSnipsJumpBackwardTrigger = '<M-CR>'                   " Bind ALT + Enter to jumo to the previous tabstop
let g:UltiSnipsEditSplit           = 'vertical'                 " Open a vertical split when running :UltiSnipsEditSplit
let g:UltiSnipsExpandTrigger       = '<Plug>(ultisnips_expand)' " Trigger keybinding

" Snippets directory
let g:UltiSnipsSnippetDir         = '/home/andrija/.vim/ultisnips'
let g:UltiSnipsSnippetDirectories = ['/home/andrija/.vim/ultisnips']
" --- UltiSnips End ---

" --- vim-gitgutter Start ---
" Custom symbols
let g:gitgutter_sign_added              = '┃'
let g:gitgutter_sign_modified           = '┃'
let g:gitgutter_sign_removed            = '┃'
let g:gitgutter_sign_removed_first_line = '┃'
let g:gitgutter_sign_modified_removed   = '┃'
" --- vim-gitgutter End ---

" --- vim-go Start ---
let g:go_auto_type_info      = 0           " Don't run GoInfo automatically
let g:go_fmt_autosave        = 0           " Disable gofmt
let g:go_highlight_methods   = 1           " Highlight methods
let g:go_highlight_operators = 1           " Highlight operators
let g:go_addtags_transform   = 'camelcase' " Use camelcase for :GoAddTags

" Bind rename to F2
augroup GoRename
    autocmd!
    autocmd FileType go nmap <buffer> <F2> <Plug>(go-rename)
augroup end
" --- vim-go End ---

" --- vim-json Start ---
" Fix IndentLine conflict
let g:vim_json_syntax_conceal = 0
" --- vim-json End ---

" --- vim-multiple-cursors Start ---
" Custom key bindings
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-m>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

" Pressing <Esc> does not quit multi cursor mode when in visual or insert mode
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0
" --- vim-multiple-cursors End ---

" --- vim-notes Start ---
" Notes directory
let g:notes_directories = ['$HOME/.vim/notes']
" --- vim-notes End ---

" --- incsearch Start ---
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" --- incsearch End ---
" --- Plugins Config End ---

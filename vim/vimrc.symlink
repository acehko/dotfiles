" --- Vim-Plug Start ---

call plug#begin('~/.vim/plugged')


" Plugins

" General
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'nanotech/jellybeans.vim'
Plug 'neomake/neomake'
Plug 'roxma/nvim-completion-manager'
Plug 'jiangmiao/auto-pairs'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'airblade/vim-gitgutter'
Plug 'Yggdroot/indentLine'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'sbdchd/neoformat'
Plug 'scrooloose/nerdcommenter'
Plug 'elzr/vim-json', { 'for': 'json' }
Plug 'terryma/vim-multiple-cursors'
Plug 'godlygeek/tabular'
Plug 'shime/vim-livedown'
Plug 'cespare/vim-toml'
Plug 'bazelbuild/vim-ft-bzl'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-notes'
Plug 'majutsushi/tagbar'
Plug 'martinda/Jenkinsfile-vim-syntax'

" Fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all --no-update-rc' }
Plug 'junegunn/fzf.vim'

" NERDTree
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'robinfehr/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'

" JavaScript
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }

" TypeScript
Plug 'mhartington/nvim-typescript', { 'for': 'typescript' }
Plug 'Shougo/vimproc.vim',          { 'for': 'typescript', 'do': 'make' }
Plug 'Quramy/tsuquyomi',            { 'for': 'typescript' }
Plug 'leafgarland/typescript-vim',  { 'for': 'typescript' }

" Golang
Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoInstallBinaries' }

" Vimscript
Plug 'Shougo/neco-vim'


call plug#end()

" --- Vim-Plug End ---



" --- Vim Config Start ---

" General
set encoding=utf8  " UTF-8 FTW
set nocompatible   " Not compatible with Vi
set autoread       " Detect when a file has changed
set visualbell     " No beep on errors
set ttimeoutlen=50 " Remove delay on ESC
set exrc           " Allow per-project configuration files
set secure         " Don't load other people's per-project configs
set ic             " Case-insensitive search
let mapleader=','  " map <Leader> to ","

" UI
syntax enable      " Enable syntax highlighting
silent! colorscheme jellybeans

set number         " Line numbers
set relativenumber " Relative line numbers
set wrap           " Word wrap
set showcmd        " Show current commands in the footer
set cursorline     " Highlight cursor line
set wildmenu       " Show tab options menu
set lazyredraw     " Redraw only when needed
set mouse=a        " Allow using the mouse
set guicursor=     " Don't change the cursor
set updatetime=250 " Faster update time


" Tabs and spaces
set expandtab
set autoindent
set smartindent

set list
set listchars=tab:\ " Show tab guides

augroup Indentation
    autocmd!
    autocmd FileType * call FourSpaceIndent()
    autocmd FileType yaml,toml call TwoSpaceIndent()
    autocmd FileType notes call NoIndentGuides()
augroup end

function! FourSpaceIndent()
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4

    silent! :IndentLinesEnable
    silent! :IndentGuidesDisable
endfunction

function! TwoSpaceIndent()
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2

    silent! :IndentLinesDisable
    silent! :IndentGuidesEnable
endfunction

function! NoIndentGuides()
    silent! :IndentLinesDisable
    silent! :IndentGuidesDisable
endfunction


" Folding
set foldlevelstart=20
set viewoptions-=options

nnoremap <space> za
vnoremap <space> zf

augroup Folding
    autocmd!
    autocmd FileType    * setlocal foldmethod=syntax
    autocmd BufWinLeave * silent! mkview
    autocmd BufWinEnter * silent! loadview
augroup end


" Window management

" Window creation
map <C-w>h :vnew<CR>
map <C-w>j :below new<CR>
map <C-w>k :new<CR>
map <C-w>l :rightb vnew<CR>

" Close a window
map <C-w>x :q<CR>

" Window movement
map <C-h> :wincmd h<CR>
map <C-j> :wincmd j<CR>
map <C-k> :wincmd k<CR>
map <C-l> :wincmd l<CR>

" Tab management
map <C-w>c :tabe<CR>
map <C-w>n :tabn<CR>
map <C-w>p :tabp<CR>

" Switching between most recent buffers
nnoremap <Leader>, :b#<CR>


" Trim trailing whitespace and empty lines at the end of file
function! TrimWhitespace()

    " Save the current search and cursor position
    let _s=@/
    let l = line('.')
    let c = col('.')

    :retab
    silent! %s#\($\n\s*\)\+\%$## " Delete empty lines at the end of file
    silent! %s/\s\+$//e          " Delete trailing whitespace

    " Restore the saved search and cursor position
    let @/=_s
    call cursor(l, c)

endfunction

" Trim whitespace on save
augroup TrimWhitespace
    autocmd!
    autocmd BufWritePre * :call TrimWhitespace()
augroup end


" Custom filetypes
augroup CustomFileTypes
    autocmd!
    autocmd BufRead,BufNewFile .yamllint set filetype=yaml
augroup end


" Statusline
hi StatusLine              ctermfg=231 ctermbg=233
hi StatusLineFileColor     ctermfg=59  ctermbg=233
hi StatusLineLockedColor   ctermfg=167 ctermbg=233
hi StatusLinePositionColor ctermfg=110 ctermbg=233

let g:modes={
    \ 'n'  : 'NORMAL',
    \ 'v'  : 'VISUAL',
    \ 'V'  : 'V·LINE',
    \ '' : 'V·BLOCK',
    \ 'i'  : 'INSERT',
    \ 't'  : 'TERMINAL'
\}

function! StatusLineMode()
    let m = mode()
    call StatusLineChangeColor(m)
    if has_key(g:modes, m)
        return '['.g:modes[m].']'
    endif
    return '['.m.']'
endfunction

function! StatusLineBranch()
    let b = fugitive#head()
    hi StatusLineBranchColor ctermfg=107 ctermbg=233

    if b == ''
        return ' '
    else
        return ''.b.' '
    endif
endfunction

function! StatusLineChangeColor(mode)
    if a:mode == 'n'
        hi StatusLineModeColor ctermfg=110 ctermbg=233
    elseif a:mode == 'i'
        hi StatusLineModeColor ctermfg=107 ctermbg=233
    elseif a:mode == 'v' || a:mode == 'V' || a:mode == ''
        hi StatusLineModeColor ctermfg=167 ctermbg=233
    elseif a:mode == 't'
        hi StatusLineModeColor ctermfg=215 ctermbg=233
    else
        hi StatusLineModeColor ctermfg=110 ctermbg=233
    endif
endfunction

function! StatusLineReadOnly()
    if &readonly || !&modifiable
        return ''
    endif
    return ''
endfunction

set noshowmode
set laststatus=2
set statusline=%#StatusLineModeColor#%{StatusLineMode()}
set statusline+=\ %#StatusLineBranchColor#%{StatusLineBranch()}
set statusline+=%#StatusLineFileColor#%f\ %#StatusLineLockedColor#%{StatusLineReadOnly()}%m
set statusline+=%=%#StatusLineFileColor#%{WebDevIconsGetFileFormatSymbol()}%{&filetype}\ [%{&fileencoding?&fileencoding:&encoding}]
set statusline+=\ %#StatusLinePositionColor#[%l/%L\ (%P)\ :\ %c]


" --- Vim Config End ---



" --- Plugin Config Start ---


" EasyMotion
" Map prefix to <Leader> instead of <Leader><Leader>
map <Leader> <Plug>(easymotion-prefix)


" Neomake
" Run on read and save
augroup Neomake
    autocmd!
    autocmd BufWinEnter,BufWritePost * silent! Neomake
augroup end

" Custom colors
:highlight NeomakeWarning ctermfg=215 ctermbg=233
:highlight NeomakeError ctermfg=160 ctermbg=233

" Custom symbols
let g:neomake_warning_sign={'text': '', 'texthl': 'NeomakeWarning'}
let g:neomake_error_sign={'text': '✘', 'texthl': 'NeomakeError'}

" Open quickfix window
let g:neomake_open_list = 2

" Close quickfix window when file is closed
augroup NeomakeQuickfixClose
    autocmd!
    autocmd BufWinEnter quickfix nnoremap <silent> <buffer> q :cclose<cr>:lclose<cr>
    autocmd BufEnter * if (winnr('$') == 1 && &buftype ==# 'quickfix' ) | bd | q | endif
augroup end


" nvim-completion-manager
" Hide completion messages
set shortmess+=c

" Insert new line when pressing Enter
inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

" Enable fuzzy matching
let g:cm_matcher = {'module': 'cm_matchers.abbrev_matcher', 'case': 'smartcase'}

" Cycle with Tab and Shift + Tab
inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"


" auto-pairs
let g:AutoPairsCenterLine         = 0
let g:AutoPairsShortcutBackInsert = '<M-e>'


" vim-gutter
" Custom symbols
let g:gitgutter_sign_added              = '┃'
let g:gitgutter_sign_modified           = '┃'
let g:gitgutter_sign_removed            = '┃'
let g:gitgutter_sign_removed_first_line = '┃'
let g:gitgutter_sign_modified_removed   = '┃'


" IndentLine
let g:indentLine_char                 = ''
let g:indentLine_first_char           = ''
let g:indentLine_showFirstIndentLevel = 1


" Neoformat
" Enabled formatters
let g:neoformat_enabled_go       = ['goimports']
let g:neoformat_enabled_js       = ['js-beautify']
let g:neoformat_enabled_python   = ['autopep8']
let g:neoformat_enabled_bzl      = ['buildifier']
let g:neoformat_enabled_markdown = ['remark']
let g:neoformat_enabled_php      = ['phpcsfixer']

" Only show messages on error
let g:neoformat_only_msg_on_error = 1

" Format on save
augroup Neoformat
    autocmd!
    autocmd BufWritePre *.go,*.js,*.py,*md,*.bzl,*.bazel,WORKSPACE,*.php silent! undojoin | Neoformat
augroup end


" NERD Commenter
" Add space after comment delimiters
let g:NERDSpaceDelims = 1

" Align left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Bind to CTRL + /
map <C-_> <Leader>c<Space>


" vim-json
" Fix IndentLine conflict
let g:vim_json_syntax_conceal = 0


" vim-multiple-cursors
" Custom key bindings
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-m>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

" Pressing <Esc> does not quit multi cursor mode when in visual or insert mode
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0


" NERDTree
" Bind NERDTree to CTRL + B
map <C-b> :NERDTreeTabsToggle<CR>

" Custom directory color
hi Directory ctermfg = 110

let g:nerdtree_tabs_open_on_console_startup = 2         " Open NERDTree if a directory was opened
let g:NERDTreeMapActivateNode               = '<Space>' " Open / close directorties and files with space
let g:NERDTreeQuitOnOpen                    = 1         " Close NERDTree when opening a file
let g:NERDTreeDirArrowExpandable            = ""       " Custom collapsed icon
let g:NERDTreeDirArrowCollapsible           = ""       " Custom expanded icon
let g:NERDTreeGitStatusWithFlags            = 0         " Disable status flags
let g:NERDTreeGitStatusNodeColorization     = 1         " Enable status colors
let g:NERDTreeMinimalUI                     = 1         " Hide help text


" DevIcons
let g:webdevicons_enable_airline_statusline              = 1    " Enabled on airline
let g:WebDevIconsNerdTreeAfterGlyphPadding               = ''   " Padding after the icon
let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol   = ''  " Default icon for unknown file types
let g:WebDevIconsUnicodeDecorateFolderNodes              = 1    " Enable icons on folders
let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ' ' " Change folder icon
let g:DevIconsEnableFolderPatternMatching                = 0    " Disable custom icons on folders

" Custom file extension icons
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols        = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['swp'] = ''

" Custom exact match files
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols               = {}
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.npmignore'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.gitignore'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols['.vimrc']     = ''


" Tsuquyomi
" Disable quickfix window, Neomake will handle checks
let g:tsuquyomi_disable_quickfix = 1

" Bind TsuquyomiRenameSymbol to F2
augroup TypescriptRename
    autocmd!
    autocmd FileType typescript nmap <buffer> <F2> <Plug>(TsuquyomiRenameSymbol)
augroup end


" vim-go
let g:go_auto_type_info      = 0           " Don't run GoInfo automatically
let g:go_fmt_autosave        = 0           " Disable gofmt
let g:go_highlight_methods   = 1           " Highlight methods
let g:go_highlight_operators = 1           " Highlight operators
let g:go_addtags_transform   = 'camelcase' " Use camelcase for :GoAddTags

" Bind rename to F2
augroup GoRename
    autocmd!
    autocmd FileType go nmap <buffer> <F2> <Plug>(go-rename)
augroup end


" fzf
" Close Tagbar, NERDTree and open fzf
function! OpenFZF()
    TagbarClose
    NERDTreeClose
    FZF
endfunction
nnoremap <C-p> :call OpenFZF()<CR>


" vim-notes
let g:notes_directories = ['~/Documents/Notes']


" tagbar
" Toggle on CTRL + G
nnoremap <C-G> :TagbarClose<CR> \| :TagbarOpenAutoClose<CR>
" Jump between tags with 'n' and 'p'
let g:tagbar_map_nexttag    = '<C-j>'
let g:tagbar_map_prevtag    = '<C-k>'
let g:tagbar_map_togglefold = '<Space>'


" --- Plugin Config End ---
